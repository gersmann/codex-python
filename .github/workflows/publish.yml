name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  id-token: write

jobs:
  build-wheels:
    name: Build native wheels
    continue-on-error: ${{ matrix.allow-failure == true }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]
        python-version: ['3.12', '3.13']
        include:
          - os: ubuntu-latest
            python-version: '3.14'
            allow-failure: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          pip install build maturin

      - name: Build wheels on Linux (maturin-action manylinux)
        if: matrix.os == 'ubuntu-latest'
        uses: PyO3/maturin-action@v1
        with:
          manylinux: auto
          command: build
          args: --release -m crates/codex_native/Cargo.toml -i python -o dist

      - name: Build wheels on macOS/Windows
        if: matrix.os != 'ubuntu-latest'
        run: |
          maturin build --release -m crates/codex_native/Cargo.toml -i python -o dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*.whl

  build-sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install build tool
        run: |
          python -m pip install --upgrade pip
          pip install build maturin

      - name: Build sdist (PEP 517)
        run: |
          python -m build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    name: Publish to PyPI (Trusted Publishing)
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          # Merge all artifacts directly into dist/ so Twine finds files
          merge-multiple: true

      - name: Flatten artifacts into dist/
        shell: bash
        run: |
          shopt -s globstar nullglob
          mkdir -p dist_flat
          for f in dist/**/*.whl dist/**/*.tar.gz; do
            mv "$f" dist_flat/
          done
          rm -rf dist
          mv dist_flat dist

      - name: Verify artifacts present
        shell: bash
        run: |
          shopt -s nullglob
          files=(dist/*.whl dist/*.tar.gz)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No distribution files found in dist/" >&2
            exit 1
          fi
          echo "Found ${#files[@]} files:" && ls -al dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true
